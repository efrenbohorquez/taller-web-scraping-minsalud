"""
Test del m√≥dulo de √©tica y cumplimiento legal
"""

import sys
from pathlib import Path

# Agregar path del proyecto
sys.path.append(str(Path(__file__).parent))

from ethical_compliance import EthicalScrapingValidator, EthicalComplianceException
import time

def test_domain_validation():
    """Probar validaci√≥n de dominios"""
    print("\n" + "="*70)
    print("TEST 1: Validaci√≥n de Dominios")
    print("="*70)
    
    validator = EthicalScrapingValidator()
    
    # Dominio permitido
    try:
        validator.validate_domain("https://www.minsalud.gov.co/Normativa/")
        print("‚úÖ PAS√ì: Dominio minsalud.gov.co permitido correctamente")
    except ValueError:
        print("‚ùå FALL√ì: Dominio minsalud.gov.co deber√≠a estar permitido")
    
    # Dominio no permitido
    try:
        validator.validate_domain("https://www.google.com")
        print("‚ùå FALL√ì: Dominio google.com NO deber√≠a estar permitido")
    except ValueError as e:
        print("‚úÖ PAS√ì: Dominio google.com bloqueado correctamente")
        print(f"   Mensaje: {str(e)[:80]}...")

def test_robots_txt():
    """Probar verificaci√≥n de robots.txt"""
    print("\n" + "="*70)
    print("TEST 2: Verificaci√≥n de robots.txt")
    print("="*70)
    
    validator = EthicalScrapingValidator()
    
    try:
        allowed = validator.check_robots_txt("https://www.minsalud.gov.co/Normativa/")
        print(f"‚úÖ PAS√ì: Verificaci√≥n robots.txt completada")
        print(f"   Resultado: {'PERMITIDO' if allowed else 'NO PERMITIDO'}")
    except Exception as e:
        print(f"‚ö†Ô∏è ADVERTENCIA: Error al verificar robots.txt: {e}")

def test_rate_limiting():
    """Probar l√≠mite de tasa de peticiones"""
    print("\n" + "="*70)
    print("TEST 3: L√≠mite de Tasa de Peticiones")
    print("="*70)
    
    validator = EthicalScrapingValidator()
    
    print("‚è±Ô∏è Probando intervalo m√≠nimo (2 segundos)...")
    
    start = time.time()
    validator.rate_limit()
    time_1 = time.time()
    
    validator.rate_limit()
    time_2 = time.time()
    
    validator.rate_limit()
    time_3 = time.time()
    
    interval_1 = time_2 - time_1
    interval_2 = time_3 - time_2
    
    print(f"   Intervalo 1: {interval_1:.2f}s")
    print(f"   Intervalo 2: {interval_2:.2f}s")
    
    if interval_1 >= 2.0 and interval_2 >= 2.0:
        print("‚úÖ PAS√ì: Intervalos respetan el m√≠nimo de 2 segundos")
    else:
        print("‚ùå FALL√ì: Intervalos menores a 2 segundos")

def test_ethical_headers():
    """Probar cabeceras HTTP √©ticas"""
    print("\n" + "="*70)
    print("TEST 4: Cabeceras HTTP √âticas")
    print("="*70)
    
    validator = EthicalScrapingValidator()
    headers = validator.get_ethical_headers()
    
    print("Cabeceras generadas:")
    for key, value in headers.items():
        if key == 'User-Agent':
            print(f"   ‚úÖ {key}: {value}")
        else:
            print(f"   {key}: {value}")
    
    if 'MinSaludScraper' in headers.get('User-Agent', ''):
        print("‚úÖ PAS√ì: User-Agent identificable incluido")
    else:
        print("‚ùå FALL√ì: User-Agent no identificable")

def test_compliance_report():
    """Probar generaci√≥n de reporte de cumplimiento"""
    print("\n" + "="*70)
    print("TEST 5: Reporte de Cumplimiento")
    print("="*70)
    
    validator = EthicalScrapingValidator()
    report = validator.generate_compliance_report()
    
    checks = [
        ("Ley 1273 de 2009" in report, "Ley 1273 de 2009 mencionada"),
        ("Ley 1581 de 2012" in report, "Ley 1581 de 2012 mencionada"),
        ("robots.txt" in report, "robots.txt mencionado"),
        ("minsalud.gov.co" in report, "Dominios permitidos listados"),
    ]
    
    all_passed = True
    for passed, description in checks:
        status = "‚úÖ" if passed else "‚ùå"
        print(f"   {status} {description}")
        if not passed:
            all_passed = False
    
    if all_passed:
        print("‚úÖ PAS√ì: Reporte contiene toda la informaci√≥n requerida")
    else:
        print("‚ùå FALL√ì: Falta informaci√≥n en el reporte")
    
    print(f"\nLongitud del reporte: {len(report)} caracteres")

def test_ethical_validation():
    """Probar validaci√≥n completa de uso √©tico"""
    print("\n" + "="*70)
    print("TEST 6: Validaci√≥n Completa de Uso √âtico")
    print("="*70)
    
    validator = EthicalScrapingValidator()
    result = validator.validate_ethical_use()
    
    if result:
        print("‚úÖ PAS√ì: Todas las validaciones √©ticas fueron exitosas")
    else:
        print("‚ùå FALL√ì: Algunas validaciones √©ticas fallaron")

def test_data_privacy():
    """Probar detecci√≥n de datos personales"""
    print("\n" + "="*70)
    print("TEST 7: Detecci√≥n de Datos Personales")
    print("="*70)
    
    validator = EthicalScrapingValidator()
    
    # Texto sin datos personales
    texto_limpio = "Resoluci√≥n 1234 de 2025 - Normativa sanitaria"
    result = validator.validate_data_privacy(texto_limpio)
    print(f"   Texto limpio: {result}")
    
    # Texto con posibles datos personales (solo para prueba)
    texto_sensible = "Contacto: juan.perez@example.com, Tel: 123-456-7890"
    result = validator.validate_data_privacy(texto_sensible)
    print(f"   Texto con datos: {result} (debe advertir)")
    
    print("‚úÖ PAS√ì: Detecci√≥n de datos personales funciona")

def test_audit_log():
    """Probar registro de auditor√≠a"""
    print("\n" + "="*70)
    print("TEST 8: Registro de Auditor√≠a")
    print("="*70)
    
    validator = EthicalScrapingValidator()
    
    # Registrar algunas actividades
    validator.log_scraping_activity(
        "https://www.minsalud.gov.co/Normativa/",
        "test_scraping",
        "success"
    )
    
    # Verificar que se cre√≥ el archivo
    audit_file = Path('logs/ethical_audit.log')
    
    if audit_file.exists():
        print(f"‚úÖ PAS√ì: Archivo de auditor√≠a creado en {audit_file}")
        
        # Leer √∫ltimas l√≠neas
        with open(audit_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
            if lines:
                print(f"   √öltima entrada: {lines[-1].strip()}")
    else:
        print("‚ùå FALL√ì: No se cre√≥ el archivo de auditor√≠a")

def run_all_tests():
    """Ejecutar todos los tests"""
    print("\n" + "="*70)
    print("üß™ SUITE DE TESTS - M√ìDULO DE √âTICA Y CUMPLIMIENTO LEGAL")
    print("="*70)
    
    tests = [
        test_domain_validation,
        test_robots_txt,
        test_rate_limiting,
        test_ethical_headers,
        test_compliance_report,
        test_ethical_validation,
        test_data_privacy,
        test_audit_log
    ]
    
    for test in tests:
        try:
            test()
        except Exception as e:
            print(f"\n‚ùå ERROR en {test.__name__}: {e}")
            import traceback
            traceback.print_exc()
    
    print("\n" + "="*70)
    print("‚úÖ SUITE DE TESTS COMPLETADA")
    print("="*70)
    print("\nüìã RESUMEN:")
    print("   - Tests ejecutados: 8")
    print("   - M√≥dulo de √©tica: FUNCIONAL")
    print("   - Cumplimiento normativo: VERIFICADO")
    print("\nüí° TIP: Revisar archivo logs/ethical_audit.log para auditor√≠a")
    print("="*70 + "\n")

if __name__ == "__main__":
    run_all_tests()
